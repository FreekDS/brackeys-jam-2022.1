[gd_scene load_steps=35 format=2]

[ext_resource path="res://UI/Background.tscn" type="PackedScene" id=1]
[ext_resource path="res://Camera.tscn" type="PackedScene" id=2]
[ext_resource path="res://UI/InsanityStateDisplay.tscn" type="PackedScene" id=3]
[ext_resource path="res://Player/Player.tscn" type="PackedScene" id=4]
[ext_resource path="res://Entities/Interactable/LivingRoom/Plant.tscn" type="PackedScene" id=5]
[ext_resource path="res://Entities/Interactable/LivingRoom/PictureFrame.tscn" type="PackedScene" id=6]
[ext_resource path="res://Entities/Interactable/LivingRoom/Couch.tscn" type="PackedScene" id=7]
[ext_resource path="res://Entities/Interactable/LivingRoom/Dresser.tscn" type="PackedScene" id=8]
[ext_resource path="res://Entities/Interactable/LivingRoom/Fish.tscn" type="PackedScene" id=9]
[ext_resource path="res://Entities/Interactable/LivingRoom/Televies.tscn" type="PackedScene" id=10]
[ext_resource path="res://Entities/Interactable/LivingRoom/Shelf.tscn" type="PackedScene" id=11]
[ext_resource path="res://Entities/Interactable/LivingRoom/Clock.tscn" type="PackedScene" id=12]
[ext_resource path="res://Entities/Interactable/LivingRoom/PizzaBox.tscn" type="PackedScene" id=13]
[ext_resource path="res://Entities/Interactable/LivingRoom/Packages1.tscn" type="PackedScene" id=14]
[ext_resource path="res://Entities/Interactable/LivingRoom/Map.tscn" type="PackedScene" id=15]
[ext_resource path="res://Game/Levels/LivingRoom/Art/LR_shogun.png" type="Texture" id=16]
[ext_resource path="res://Entities/Interactable/LivingRoom/Guitar.tscn" type="PackedScene" id=17]
[ext_resource path="res://Entities/Interactable/LivingRoom/FishFood.tscn" type="PackedScene" id=18]
[ext_resource path="res://Entities/Interactable/LivingRoom/Shotgun.tscn" type="PackedScene" id=19]
[ext_resource path="res://Entities/Interactable/LivingRoom/Bottle.tscn" type="PackedScene" id=20]
[ext_resource path="res://Entities/Interactable/LivingRoom/Lamp.tscn" type="PackedScene" id=21]
[ext_resource path="res://Game/Levels/LivingRoom/Art/LR_BG.png" type="Texture" id=22]
[ext_resource path="res://Game/InteractablesManager.gd" type="Script" id=23]
[ext_resource path="res://Game/Levels/LivingRoom/Art/LR_evilFish.png" type="Texture" id=24]
[ext_resource path="res://Game/Levels/LivingRoom/GameLiving.gd" type="Script" id=25]

[sub_resource type="CanvasItemMaterial" id=2]
light_mode = 1

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.537037, 1 )
colors = PoolColorArray( 0.783784, 0.783784, 0.783784, 1, 1, 1, 1, 1, 1, 1, 1, 0.364706 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )

[sub_resource type="ParticlesMaterial" id=5]
emission_shape = 1
emission_sphere_radius = 2.0
flag_disable_z = true
direction = Vector3( 1, 1, 1 )
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 10.0
initial_velocity_random = 0.3
orbit_velocity = 0.0
orbit_velocity_random = 0.0
damping = 10.0
damping_random = 1.0
color_ramp = SubResource( 4 )

[sub_resource type="Shader" id=8]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.3.stable's ParticlesMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec3 emission_box_extents;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;

uniform sampler2D sprite;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		uint alt_restart_seed = hash(base_number + uint(301184) + RANDOM_SEED);
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_restart_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_restart_seed), initial_linear_velocity_random);
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_restart_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
		
		vec2 particlePosition = TRANSFORM[3].xy;
		vec2 textureS = vec2(textureSize(sprite, 0));
		vec4 spriteColor = texture(sprite, particlePosition / textureS + vec2(0.5, 0.5));
		COLOR = spriteColor;
		
		VELOCITY.xy = particlePosition * initial_linear_velocity;
		
		if(spriteColor.a == 0.0) {
			ACTIVE = false;
		}
		
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = 1.0;
	float tex_hue_variation = 0.0;
//	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
//	float hue_rot_c = cos(hue_rot_angle);
//	float hue_rot_s = sin(hue_rot_angle);
//	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.000, 0.000, 0.000, 1.0)) +
//		mat4(vec4(0.701, -0.587, -0.114, 0.0),
//			vec4(-0.299, 0.413, -0.114, 0.0),
//			vec4(-0.300, -0.588, 0.886, 0.0),
//			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
//		mat4(vec4(0.168, 0.330, -0.497, 0.0),
//			vec4(-0.328, 0.035,  0.292, 0.0),
//			vec4(1.250, -1.050, -0.203, 0.0),
//			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
//	COLOR = hue_rot_mat * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	
	if (COLOR.a > 0.0) {
		COLOR.a -= 1.0 / LIFETIME * DELTA;
	}
	
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 0.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 10.0
shader_param/initial_angle = 0.0
shader_param/angular_velocity = 10.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 100.0
shader_param/radial_accel = 10.0
shader_param/tangent_accel = 10.0
shader_param/damping = 5.0
shader_param/scale = 3.0
shader_param/hue_variation = 0.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 0.0
shader_param/initial_linear_velocity_random = 0.0
shader_param/initial_angle_random = 0.0
shader_param/angular_velocity_random = 0.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 0.0
shader_param/lifetime_randomness = 0.0
shader_param/emission_box_extents = Vector3( 10, 10, 1 )
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, -1e-06, 0 )
shader_param/sprite = ExtResource( 24 )

[sub_resource type="Animation" id=6]
resource_name = "LevelEnd"
length = 5.0
tracks/0/type = "value"
tracks/0/path = NodePath("Player:in_cutscene")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 181, 389 ) ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("Player")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ true ],
"method": "flip"
} ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("AnimationProps/Shotgun:rotation_degrees")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 1, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 39.8302 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("AnimationProps/Shotgun:position")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 1.1, 1.5, 1.6, 1.7, 1.8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 134, 415 ), Vector2( 128, 395 ), Vector2( 147, 408 ), Vector2( 178, 428 ), Vector2( 131, 392 ), Vector2( 164, 419 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("AnimationProps/Shotgun:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Player:neck_rotation")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 20 ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("AnimationProps/Particles2D:emitting")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 1.6 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("AnimationProps/FishExplode:emitting")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 1.8 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/9/type = "value"
tracks/9/path = NodePath("InteractablesBack/Fish:visible")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0, 1.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("../CanvasModulate:color")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 0, 2.99998, 4.9 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.686275, 0.686275, 0.686275, 1 ), Color( 0.686275, 0.686275, 0.686275, 1 ), Color( 0, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Player:in_cutscene")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Player:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -262, 408 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Player:disable_movement")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("AnimationProps/Shotgun:rotation_degrees")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("AnimationProps/Shotgun:position")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 134, 415 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("AnimationProps/Shotgun:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Player:neck_rotation")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("Player:rotation_degrees")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("AnimationProps/Particles2D:emitting")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/9/type = "value"
tracks/9/path = NodePath("AnimationProps/FishExplode:emitting")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("InteractablesBack/Fish:visible")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/11/type = "value"
tracks/11/path = NodePath("../CanvasModulate:color")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0.686275, 0.686275, 0.686275, 1 ) ]
}

[sub_resource type="Environment" id=1]
background_mode = 4
glow_enabled = true
glow_bicubic_upscale = true

[node name="LivingRoom" type="Node"]

[node name="Background" parent="." instance=ExtResource( 1 )]
texture = ExtResource( 22 )

[node name="Game" type="Node2D" parent="."]
script = ExtResource( 25 )

[node name="Camera" type="Node2D" parent="Game"]

[node name="TrackingCam" parent="Game/Camera" instance=ExtResource( 2 )]
offset = Vector2( 0, 300 )
current = true
TrackingObject = NodePath("../../Player")
stopAtEdge = true
minX = 85
maxX = 940

[node name="Left" type="Position2D" parent="Game/Camera"]
position = Vector2( 50, -40 )

[node name="Right" type="Position2D" parent="Game/Camera"]
position = Vector2( 1000, -50 )

[node name="InteractablesBack" type="Node2D" parent="Game"]
script = ExtResource( 23 )
PlayerPath = NodePath("../Player")
InsanityLayerPath = NodePath("../InsanityLayer/InsanityStateDisplay")
OtherInteractablesPath = NodePath("../InteractablesFront")

[node name="Bottle" parent="Game/InteractablesBack" instance=ExtResource( 20 )]
position = Vector2( -157, 359 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Clock" parent="Game/InteractablesBack" instance=ExtResource( 12 )]
position = Vector2( -287, 142 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Dresser" parent="Game/InteractablesBack" instance=ExtResource( 8 )]
position = Vector2( -51, 461 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Fish" parent="Game/InteractablesBack" instance=ExtResource( 9 )]
modulate = Color( 1.5, 1.5, 2, 1 )
position = Vector2( -83, 191 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false
detection_radius = 250

[node name="FishFood" parent="Game/InteractablesBack" instance=ExtResource( 18 )]
position = Vector2( 18, 204 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false
detection_radius = 250

[node name="Guitar" parent="Game/InteractablesBack" instance=ExtResource( 17 )]
position = Vector2( 1159, 440 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Lamp" parent="Game/InteractablesBack" instance=ExtResource( 21 )]
position = Vector2( 1385, 361 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Shotgun" parent="Game/InteractablesBack" instance=ExtResource( 19 )]
position = Vector2( 1052, 268 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Map" parent="Game/InteractablesBack" instance=ExtResource( 15 )]
position = Vector2( 1009, 197 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false
detection_radius = 400

[node name="Packages1" parent="Game/InteractablesBack" instance=ExtResource( 14 )]
position = Vector2( 906, 476 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="PictureFrame" parent="Game/InteractablesBack" instance=ExtResource( 6 )]
position = Vector2( 27, 375 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Plant" parent="Game/InteractablesBack" instance=ExtResource( 5 )]
position = Vector2( -374, 443 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Shelf" parent="Game/InteractablesBack" instance=ExtResource( 11 )]
position = Vector2( -47, 240 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Televies" parent="Game/InteractablesBack" instance=ExtResource( 10 )]
position = Vector2( 395, 234 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false
detection_radius = 250

[node name="Player" parent="Game" instance=ExtResource( 4 )]
position = Vector2( -262, 408 )
scale = Vector2( 1.733, 1.733 )

[node name="InteractablesFront" type="Node2D" parent="Game"]

[node name="PizzaBox" parent="Game/InteractablesFront" instance=ExtResource( 13 )]
position = Vector2( 599, 518 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Couch" parent="Game/InteractablesFront" instance=ExtResource( 7 )]
position = Vector2( 328, 512 )
scale = Vector2( 6.5, 6.5 )
debug_draw = false

[node name="Ground" type="StaticBody2D" parent="Game"]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Game/Ground"]
position = Vector2( 449, 253 )
scale = Vector2( 100, 35 )
build_mode = 1
polygon = PoolVector2Array( -8.84, -7.11429, -8.8, 8.57143, 10, 8.57143, 10.03, -7.17143, 10.27, -7.17143, 10.27, 9.97143, -9.32, 9.94286, -9.31, -7.17143 )

[node name="InsanityLayer" type="CanvasLayer" parent="Game"]

[node name="InsanityStateDisplay" parent="Game/InsanityLayer" instance=ExtResource( 3 )]
visible = false

[node name="AnimationProps" type="Node2D" parent="Game"]

[node name="Shotgun" type="Sprite" parent="Game/AnimationProps"]
visible = false
position = Vector2( 134, 415 )
scale = Vector2( 9, 9 )
texture = ExtResource( 16 )

[node name="Particles2D" type="Particles2D" parent="Game/AnimationProps"]
material = SubResource( 2 )
position = Vector2( 103, 356 )
scale = Vector2( 8, 8 )
emitting = false
amount = 200
lifetime = 2.0
one_shot = true
speed_scale = 3.0
explosiveness = 1.0
randomness = 1.0
process_material = SubResource( 5 )

[node name="FishExplode" type="Particles2D" parent="Game/AnimationProps"]
position = Vector2( -85, 190 )
scale = Vector2( 2, 2 )
emitting = false
amount = 8000
one_shot = true
explosiveness = 1.0
process_material = SubResource( 9 )

[node name="LevelAnimations" type="AnimationPlayer" parent="Game"]
anims/LevelEnd = SubResource( 6 )
anims/RESET = SubResource( 7 )

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.686275, 0.686275, 0.686275, 1 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )

[connection signal="action_end_level" from="Game/InteractablesBack/Fish" to="Game" method="_on_Fish_action_end_level"]
[connection signal="finished" from="Game/InsanityLayer/InsanityStateDisplay" to="Game/Player" method="_on_InsanityStateDisplay_finished"]
[connection signal="playing" from="Game/InsanityLayer/InsanityStateDisplay" to="Game/Player" method="_on_InsanityStateDisplay_playing"]
[connection signal="animation_finished" from="Game/LevelAnimations" to="Game" method="_on_LevelAnimations_animation_finished"]
