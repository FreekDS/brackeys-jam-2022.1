[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float noiselevel = 0.4;
uniform float rgbshiftlevel = 0.01;
uniform float ghostreflectionlevel = 0.03;

const bool bypass = false;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void fragment() {
	
	vec2 grid_uv = round(UV * float(40)) / float(40);
	
	vec2 iResolution = 1000000.0 / SCREEN_PIXEL_SIZE;
	vec2 uv = FRAGCOORD.xy / iResolution.xy;
    
    float randomValue = rand(vec2(uv.x+sin(TIME), uv.y+cos(TIME)));
    float rgbShift = sin(TIME+randomValue)*rgbshiftlevel;
    
    if(randomValue > 0.95-ghostreflectionlevel)
    	grid_uv.x+=sin(TIME/5.0)*0.5;
   
	grid_uv.x += 500.0;
    grid_uv.y += (cos(TIME*randomValue)+0.5) * (randomValue*5.01) + 20.0;
    
    float colorr = texture(TEXTURE, vec2(grid_uv.x+rgbShift, grid_uv.y)).r;
    float colorg = texture(TEXTURE, vec2(grid_uv.x, grid_uv.y)).g;
    float colorb = texture(TEXTURE, vec2(grid_uv.x-rgbShift, grid_uv.y)).b;
    
  	vec4 movieColor = vec4(colorr,colorg,colorb, 1.0);
    vec4 noiseColor = vec4(randomValue,randomValue,randomValue,1.0);
 
    if(randomValue > 0.55-ghostreflectionlevel)
    	noiseColor = abs(noiseColor - 0.2);
 
    if(bypass)
        COLOR = texture(TEXTURE, grid_uv); 
    else
      	COLOR = mix(movieColor, noiseColor, noiselevel);
}"

[resource]
shader = SubResource( 1 )
shader_param/noiselevel = 0.4
shader_param/rgbshiftlevel = 0.01
shader_param/ghostreflectionlevel = 0.03
